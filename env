import gym
import pybullet as p
import time
import pybullet_data
import os 
from gym import Env
from gym.spaces import Box
import numpy as np
import random 
import math

class RobotEnv(Env): # defines class by passing Env to RoboEnv through gym env inheritance, python class inheritance 

    def __init__(self):

        self.action_space = Box(np.array([-math.pi, -math.pi, -math.pi]), # Let's assume three joints
                                np.array([+math.pi, +math.pi, +math.pi]))
        self.observation_space = Box(np.array([-math.pi, -math.pi, -math.pi, -5*math.pi/180, -5*math.pi/180]), # The rotation of
                                     np.array([+math.pi, +math.pi, +math.pi, +5*math.pi/180, +5*math.pi/180])) # omelette to be
                                                                     # included
        if (self.render):
            self.physicsClient = p.connect(p.GUI)
        else:
            self.physicsClient = p.connect(p.DIRECT)  # non-graphical version

        p.setAdditionalSearchPath(pybullet_data.getDataPath())  # used by loadURDF
        
        self.state = None
        
    def step(self, action):
        
        p.setRealTimeSimulation(True, self.physicsClient)
        shoulder = action[0]
        elbow = action[1]
        wrist = action[2]
        action_processed = np.array([0, shoulder, elbow, 0, wrist, 0])
        p.setJointMotorControlArray(self.robot, range(6), p.POSITION_CONTROL, action_processed)
        p.stepSimulation()
        time.sleep(0.01)
        
        
        panPos = self.panInfo[0] 
        panPosX, panPosY, panPosZ = round(panPos[0]+ 0.8, 3), round(panPos[1]-0.05, 3), round(panPos[2]-0.01, 3) # pan  position coordinates
        maxPanX, maxPanY, maxPanZ = round(panPos[0]+ 1, 3), round(panPos[1]+0.1, 3), round(panPos[2]+0.1, 3) # max position of the pan 
        posX, posY, posZ = self.omelettePos[0], self.omelettePos[1], self.omelettePos[2] # omelette position


        minX, maxX = posX >= panPosX, posX <= maxPanX
        minY, maxY = posY >= panPosY, posY <= maxPanY
        minZ = posZ >= panPosZ
        
        #print("current position of pan: ", panPosX, panPosY, panPosZ)
        #print("current position of omelette: ", self.omelettePos)
        
        if (self.flip()):
            if (minX and minY and minZ and maxX and maxY):
                reward = 1
            else:
                reward = -1
        else:
            reward = -1 
        
        print(reward)
        info = {}
        done = self.done()
        self.envCounter += 1
        
        return self.state, reward, done, info 

    
    def reset(self):
        # reset is called once at initialization of simulation
        self.envCounter = 0
        self.state = self.observation_space

        p.resetSimulation()
        p.setGravity(0,0,-9.8) 
        planeId = p.loadURDF("plane.urdf")
        
        self.robot = p.loadURDF("FYP/kuka_experimental/kuka_kr210_support/urdf/kr210l150.urdf",  [0, 0, 0], useFixedBase=1)
        
        omeletteID = p.createCollisionShape(p.GEOM_CYLINDER, radius=0.2, height=0.01)
        mass = 0.2
        visualShapeID = 1
        self.omeletteStartPosition=[2.7, 0,2]
        self.omelette = p.createMultiBody(mass, omeletteID, visualShapeID, self.omeletteStartPosition)
        
        self.omelettePos, self.omeletteOrn = p.getBasePositionAndOrientation(self.omelette)
        self.panInfo = p.getLinkState(self.robot, 4 )
        
        return self.state 
    
    
    def render(self, mode='human', close=False):
        pass
    
    def flip(self):
        
        #180 degree(pi radians) rotation of omelette in x or y axis, returns True 
        orientation = p.getEulerFromQuaternion(self.omeletteOrn)
        ornX = round(orientation[0], 3)
        ornY = round(orientation[1], 3)
        ornZ = round(orientation[2], 3)
        
        #creating bounds
        start = round(math.pi-0.2, 3)
        stop = round(math.pi+0.2, 3)
        negstart = round(-math.pi-0.2, 3)
        negstop = round(-math.pi+0.2, 3)
        
        if (ornX >= start and ornX <= stop) or (ornX >= negstart and ornX <= negstop):
            #check if omelette has flipped in x direction, return true
            return True
        elif (ornY >= start and ornY <= stop) or (ornY >= negstart and ornY <= negstop):
            #check if omelette has flipped in y direction, return true
            return True
        else:
            #omelette has not flipped 
            return False 

    def done(self): 
        omelette_on_the_floor = self.omelettePos[2] < 0.15
       
        return omelette_on_the_floor self.envCounter >= 500
    
    def close(self):
        p.disconnect(self.physicsClient)
        
